from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime
from anthropic import Anthropic
import os


app = FastAPI(
    title="Asheville Relief Webhooks Baby",
    description="An API for handling various Asheville Relief processes",
    version="0.0.1",
)

class Submission(BaseModel):
    organization: str
    category: str
    contact_info: dict
    address: str
    cross_streets: Optional[str]
    retrieved_date_time: datetime
    available_date_time: str
    good_until: str
    payment_required: bool
    hours: str
    details: str
    link: Optional[str]
    source: str

class ContentIdea(BaseModel):
    platform: str
    content: str

class SubmissionResponse(BaseModel):
    status: str
    message: str
    content_ideas: Optional[List[ContentIdea]]

def create_prompt(submission: Submission) -> str:
    """Convert Submission data into a prompt for Claude."""
    return f"""
    You are a compassionate and empathetic copywriter that will convert the following submission data into social media posts that will keep the community informed about the latest resources available to help victims of hurricane helene that recently devestated asheville. you are part of a team of passionate volunteers who are dedicated to helping rebuild the community. your posts will uplift and inform the people most impacted by this tragedy. 

    Organization: {submission.organization}
    Category: {submission.category}
    Contact Info: {submission.contact_info}
    Address: {submission.address}
    Cross Streets: {submission.cross_streets}
    Available Date/Time: {submission.available_date_time}
    Good Until: {submission.good_until}
    Payment Required: {'Yes' if submission.payment_required else 'No'}
    Hours: {submission.hours}
    Details: {submission.details}
    Link: {submission.link}
    Source: {submission.source}

    Please format your response as follows:
    Twitter: [Twitter post content]
    Facebook: [Facebook post content]
    Instagram: [Instagram post content]
    """

async def generate_content_ideas(submission: Submission) -> List[ContentIdea]:
    client = Anthropic(api_key=os.environ.get("ANTHROPIC_API_KEY"))
    prompt = create_prompt(submission)
    
    message = client.messages.create(
        max_tokens=1024,
        messages=[
            {
                "role": "user",
                "content": prompt,
            }
        ],
        model="claude-3-5-sonnet-20240620",
    )
    
    # Parse Claude's response
    content = message.content[0].text if isinstance(message.content, list) else message.content
    platforms = ['Twitter:', 'Facebook:', 'Instagram:']
    ideas = []
    
    lines = content.split('\n')
    current_platform = None
    current_content = []

    for line in lines:
        if any(platform in line for platform in platforms):
            if current_platform:
                ideas.append(ContentIdea(platform=current_platform.strip(':'), content='\n'.join(current_content).strip()))
                current_content = []
            current_platform = line.strip()
        elif current_platform:
            current_content.append(line)

    # Add the last platform
    if current_platform:
        ideas.append(ContentIdea(platform=current_platform.strip(':'), content='\n'.join(current_content).strip()))

    return ideas


@app.post("/submit", response_model=SubmissionResponse)
async def handle_submission(submission: Submission):
    """
    Handle a new submission and generate social media content ideas using Claude API.

    This endpoint accepts submission data for a local service or event in Asheville and processes it to create
    social media content ideas using the Claude Language Model.

    Parameters:
    - submission: A Submission object containing details about the service or event.

    Returns:
    - A SubmissionResponse object containing:
        - status: "success" if the submission was processed successfully
        - message: A brief message about the result of the operation
        - content_ideas: A list of ContentIdea objects generated by Claude
    """
    try:
        content_ideas = await generate_content_ideas(submission)
        return SubmissionResponse(
            status="success",
            message="Submission received and content ideas generated successfully!",
            content_ideas=content_ideas
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")


@app.get("/")
async def root():
    """
    Root endpoint of the Asheville Relief Webhooks API.

    Returns a welcome message and basic information about the API.
    """
    return {
        "message": "Welcome to the Asheville Relief Webhooks API",
        "version": app.version,
        "docs_url": "/docs"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
